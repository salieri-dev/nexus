"""Dynamic help command handler"""

from functools import wraps
from typing import Dict, List

from pyrogram import Client, filters
from pyrogram.types import Message
from structlog import get_logger

log = get_logger(__name__)

# Store for command help information
command_help: Dict[str, Dict] = {}


def command_handler(commands: List[str], description: str, arguments: str = None, group: str = "–û–±—â–∏–µ"):
    """Decorator to register command help information.

    Args:
        commands: List of command names (without /)
        description: Command description
        arguments: Optional arguments specification (e.g. "[prompt] - —Ç–µ–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        group: Command group for organization
    """

    def decorator(func):
        # Register help info for each command
        for cmd in commands:
            command_help[cmd] = {"description": description, "arguments": arguments, "group": group}

        @wraps(func)
        async def wrapper(*args, **kwargs):
            return await func(*args, **kwargs)

        return wrapper

    return decorator


@Client.on_message(filters.command("help"))
async def help_handler(client: Client, message: Message):
    """Dynamic help command that shows available commands grouped by category"""
    try:
        # Group commands by handler (using description as key)
        handlers: Dict[str, Dict] = {}

        for cmd, info in command_help.items():
            key = f"{info['group']}:{info['description']}"
            if key not in handlers:
                handlers[key] = {"commands": [], "description": info["description"], "arguments": info["arguments"], "group": info["group"]}
            handlers[key]["commands"].append(cmd)

        # Define emoji mapping for groups
        group_emojis = {"–£—Ç–∏–ª–∏—Ç—ã": "üìé", "–ò–≥—Ä—ã": "üéÆ", "NSFW": "üîû", "–ú–µ–º—ã": "ü§™", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è": "üñºÔ∏è", "—Å–≥–ª—ã–ø–∞": "‚úçÔ∏è", "–†–∞–Ω–¥–æ–º": "üé≤", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞": "üìâ"}

        # Group handlers by category
        groups: Dict[str, List[Dict]] = {}
        for handler in handlers.values():
            group = handler["group"]
            if group not in groups:
                groups[group] = []

            # Sort commands for consistent output
            handler["commands"].sort()
            groups[group].append(handler)

        # Build help message
        help_text = []

        # Add command sections
        for group, handlers in sorted(groups.items()):
            emoji = group_emojis.get(group, "üîπ")
            help_text.append(f"\n{emoji} {group}:")

            for handler in sorted(handlers, key=lambda x: x["commands"][0]):
                # Get all commands for this handler
                cmd_list = [f"/{cmd}" for cmd in handler["commands"]]
                commands = ", ".join(cmd_list)

                # Add arguments if available
                args_text = ""
                if handler.get("arguments"):
                    # Handle both string and list arguments
                    if isinstance(handler["arguments"], list):
                        # Join the list but preserve the original format
                        args_text = f" __{', '.join(handler['arguments'])}__"
                    else:
                        args_text = f" __{handler['arguments']}__"

                # Add NSFW emoji if in NSFW group
                nsfw_mark = " üîû" if group == "NSFW" else ""
                command_text = f"‚Ä¢ {commands}{args_text} ‚Äî {handler['description']}{nsfw_mark}"

                help_text.append(command_text)

        # Add passive functionality section in blockquote
        help_text.extend(
            [
                "\n**–ü–∞—Å—Å–∏–≤–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:**",
                "‚Ä¢ –°–∫–∞—á–∏–≤–∞–µ—Ç —Ä–∏–ª–∑—ã –∏–∑ Instagram",
                "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤–æ–π—Å—ã –≤ —Ç–µ–∫—Å—Ç\n",
                "\n>–ë–æ—Ç –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–æ –≤—Å–µ—Ö –±–∞–≥–∞—Ö —Å–æ–æ–±—â–∞–π—Ç–µ @not_salieri !",
                ">–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é —á–∞—Ç–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ –≤ —á–∞—Ç–∞—Ö —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /config!\n"
                ">–ö–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ üîû –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç. "
                "–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –º–æ–≥—É—Ç –±—ã—Ç—å –±–∞–≥–∏ –∏ –æ—à–∏–±–∫–∏. –í —Å–ª—É—á–∞–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–ª–∏ –æ—à–∏–±–æ–∫, –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: @not_salieri",
            ]
        )

        await message.reply_text("\n".join(help_text), quote=True)

    except Exception as e:
        log.error("Error handling help command", error=str(e))
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥", quote=True)
