"""Woman command handlers"""
import os
import random
from typing import List

from pyrogram import Client, filters
from pyrogram.enums import ChatType
from pyrogram.types import ChatMember, InputMediaPhoto, Message

from src.plugins.help import command_handler
from src.security.permissions import requires_setting

NO_IMAGES_FOUND = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
GENERAL_ERROR = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# Relationship terms and actions
RELATIONSHIP_TERMS = [
    "–∂–µ–Ω–∞", "–¥–µ–≤—É—à–∫–∞", "–ª—é–±–æ–≤–Ω–∏—Ü–∞", "–ø–∏—Ç–æ–º–µ—Ü", "—Å–µ—Å—Ç—Ä–∞", "–º–∞–º–∞", "—Ç—ë—â–∞",
    "–µ–±–Ω—ë—Ç –∫–∞–º–Ω–µ–º", "–∏–∑–æ–±—å—ë—Ç", "–Ω–∞—Å—Ç—É–ø–∏—Ç –Ω–∞ —è–π—Ü–∞", "–æ—Ç–æ—Ä–≤—ë—Ç —è–π—Ü–∞", "–≤—ã–µ–±–µ—Ç",
    "–ø–æ–∫–∞–∂–µ—Ç –Ω–æ–∂–∫–∏", "–ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∏—Å—å–∫–∏", "–∑–∞–¥—É—à–∏—Ç", "—É–±—å–µ—Ç", "–∏–∑–Ω–∞—Å–∏–ª—É–µ—Ç",
    "—Ç–∏—Ö–æ–Ω–µ—á–∫–æ", "—Ñ–µ–º–≤–µ—Ä—Å–∏—è", "—Ç—Ä–∞–ø–∏–∫", "–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç —Ö–∞—á–∞–ø—É—Ä–∏", "—Å–æ—Ö–Ω–µ—Ç –ø–æ",
    "–∏–∑–º–µ–Ω–∏—Ç", "–¥–∞—Å—Ç –Ω–∏–∫–µ–ª–µ–≤—É—é –∫–∞–º—É—à–∫—É", "–ø–æ—Å–ª—É—à–∞–µ—Ç –º—É–∑—ã–∫—É", "–Ω–µ–Ω–∞–≤–∏–¥–∏—Ç",
    "–ª—é–±–∏—Ç", "–±—É–¥–µ—Ç –ø–æ–¥—Ä–∞–∑–Ω–∏–≤–∞—Ç—å", "–ø–æ–º—É—Ä–ª—ã—á–∏—Ç –≤ –¥–∏—Å–∫–æ—Ä–¥–∏–∫–µ", "–ø–æ–¥–∞—Ä–∏—Ç —Ü–≤–µ—Ç—ã",
    "–Ω–∞–∫–æ—Ä–º–∏—Ç –±–æ—Ä—â–æ–º", "–∑–∞—Å—Ç–∞–≤–∏—Ç –º—ã—Ç—å –ø–æ—Å—É–¥—É", "–ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç —Å –º–∞–º–æ–π",
    "–Ω–∞–ø–∏—à–µ—Ç —Å—Ç–∏—Ö–∏", "–æ—Ç–≤–µ–¥–µ—Ç –≤ –∫–∏–Ω–æ", "—Å–¥–µ–ª–∞–µ—Ç –º–∞—Å—Å–∞–∂", "–∏—Å–ø–µ—á–µ—Ç –ø–∏—Ä–æ–∂–∫–∏",
    "–ø–æ–≥–ª–∞–¥–∏—Ç –ø–æ –≥–æ–ª–æ–≤–µ", "—Å–ø–æ–µ—Ç –∫–æ–ª—ã–±–µ–ª—å–Ω—É—é", "–Ω–∞—É—á–∏—Ç –≥–æ—Ç–æ–≤–∏—Ç—å", "–±—É–¥–µ—Ç —Ä–µ–≤–Ω–æ–≤–∞—Ç—å",
    "–ø–æ—Å—Ç–∏—Ä–∞–µ—Ç –Ω–æ—Å–∫–∏", "–∑–∞—Å—Ç–∞–≤–∏—Ç –Ω–æ—Å–∏—Ç—å –ø–ª–∞—Ç—å–µ", "–Ω–∞–∫—Ä–∞—Å–∏—Ç –≥—É–±—ã", "—Å–¥–µ–ª–∞–µ—Ç –ø—Ä–∏—á–µ—Å–∫—É",
    "–Ω–∞—É—á–∏—Ç —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å", "–≤–æ–∑—å–º–µ—Ç –Ω–∞ —à–æ–ø–∏–Ω–≥", "–±—É–¥–µ—Ç –ø–∏–ª–∏—Ç—å"
]

ACCUSATIVE_VERBS = [
    "–∂–µ–Ω–∞", "–¥–µ–≤—É—à–∫–∞", "–ª—é–±–æ–≤–Ω–∏—Ü–∞", "–ø–∏—Ç–æ–º–µ—Ü", "—Å–µ—Å—Ç—Ä–∞", "–º–∞–º–∞", "—Ç—ë—â–∞",
    "–µ–±–Ω—ë—Ç –∫–∞–º–Ω–µ–º", "—Ä–∞–∑–æ—Ä–≤—ë—Ç", "–Ω–∞—Å–∞–¥–∏—Ç –Ω–∞ –∫–æ–ª", "–∑–∞—Ä–µ–∂–µ—Ç", "–∑–∞—Å—Ç–∞–ª–∫–µ—Ä–∏—Ç",
    "–∂–µ–Ω—Å–∫–∞—è –≤–µ—Ä—Å–∏—è", "–≤—ã–µ–±–µ—Ç", "–∑–∞–¥—É—à–∏—Ç", "—É–±—å–µ—Ç", "–∏–∑–Ω–∞—Å–∏–ª—É–µ—Ç", "–∏–∑–æ–±—å—ë—Ç",
    "–æ—Ç–æ—Ä–≤—ë—Ç —è–π—Ü–∞", "–±—É–¥–µ—Ç –ø–æ–¥—Ä–∞–∑–Ω–∏–≤–∞—Ç—å", "—Ç—Ä–∞–ø–∏–∫", "–Ω–µ–Ω–∞–≤–∏–¥–∏—Ç", "–ø–æ—Å–ª—É—à–∞–µ—Ç –º—É–∑—ã–∫—É",
    "–ª—é–±–∏—Ç", "–∏–∑–Ω–∏—á—Ç–æ–∂–∏—Ç –ø–µ–Ω–∏—Å", "–∑–∞–∫—É–∫–æ–ª–¥–∏—Ç", "–ø–æ—Å–∞–¥–∏—Ç –≤ —Ç—é—Ä—å–º—É", "—É–±–∞—é–∫–∞–µ—Ç –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
    "—Ñ–µ–º–≤–µ—Ä—Å–∏—è", "–≤–æ–∑—å–º–µ—Ç –∑–∞–º—É–∂", "—Å–¥–µ–ª–∞–µ—Ç —Ñ–µ–º–∏–Ω–∏—Å—Ç–æ–º", "–∑–∞—Å—Ç–∞–≤–∏—Ç –≥–æ—Ç–æ–≤–∏—Ç—å",
    "–æ—Ç–ø—Ä–∞–≤–∏—Ç –º—ã—Ç—å –ø–æ—Å—É–¥—É", "–Ω–∞–∫—Ä–∞—Å–∏—Ç –≥—É–±—ã", "–æ–¥–µ–Ω–µ—Ç –≤ –ø–ª–∞—Ç—å–µ", "–Ω–∞—É—á–∏—Ç –≤—ã—à–∏–≤–∞—Ç—å",
    "–æ—Ç–≤–µ–¥–µ—Ç –∫ –º–∞–º–µ", "–∑–∞—Å—Ç–∞–≤–∏—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–ª–æ–¥—Ä–∞–º—ã", "–±—É–¥–µ—Ç –ø–∏–ª–∏—Ç—å",
    "–∑–∞—Å—Ç–∞–≤–∏—Ç —Ö–æ–¥–∏—Ç—å –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º", "–Ω–∞—É—á–∏—Ç –≥–ª–∞–¥–∏—Ç—å", "–∑–∞—Å—Ç–∞–≤–∏—Ç —É–±–∏—Ä–∞—Ç—å—Å—è",
    "–Ω–∞—É—á–∏—Ç —Å—Ç–∏—Ä–∞—Ç—å", "—Å–¥–µ–ª–∞–µ—Ç –¥–æ–º–æ—Ö–æ–∑—è–π–∫–æ–π", "–ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç –≤ –ø–æ–¥–∫–∞–±–ª—É—á–Ω–∏–∫–∞",
    "—É–∫—Ä–∞–¥–µ—Ç –Ω–æ—Å–∫–∏", "—Å–ø—Ä—è—á–µ—Ç –ø—Ä–∞–≤–∞", "–∑–∞–±–µ—Ä–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É", "–∑–∞—Å—Ç–∞–≤–∏—Ç —Å–ø–∞—Ç—å –Ω–∞ –¥–∏–≤–∞–Ω–µ", "–≤–æ–∑—å–º–µ—Ç –≤ –ó–ê–ì–°",
]


def get_image_owner_mapping(image_path: str) -> str:
    """Extract the platform and username from the directory name and create appropriate link"""
    # Get the parent directory name which contains the platform and username
    dir_name = os.path.basename(os.path.dirname(image_path))

    # Split by underscore to separate platform and username
    if "_" not in dir_name:
        return "Unknown source"

    platform, username = dir_name.split("_", 1)

    # Create appropriate link based on platform
    if platform == "tg":
        return f"[{username}](https://t.me/{username})"
    elif platform == "vk":
        return f"[{username}](https://vk.com/{username})"
    else:
        return "Unknown source"


def get_random_images(folder_path: str, count: int) -> List[str]:
    """Get random images from the specified folder"""
    images = []
    for root, _, files in os.walk(folder_path):
        for file in files:
            if file.lower().endswith((".png", ".jpg", ".jpeg", ".gif")):
                images.append(os.path.join(root, file))

    return random.sample(images, min(count, len(images))) if images else []


async def get_chat_members(client: Client, chat_id: int) -> List[ChatMember]:
    """Get list of chat members excluding bots"""
    try:
        return [member async for member in client.get_chat_members(chat_id) if not member.user.is_bot]
    except Exception:
        return []


@command_handler(
    commands=["woman", "women"],
    description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∂–µ–Ω—â–∏–Ω —Å –∑–∞–±–∞–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏",
    group="NSFW"
)
@Client.on_message(filters.command(["woman", "women", "females"]), group=2)
@requires_setting('nsfw')
async def woman_command(client: Client, message: Message):
    """Send random woman images with funny captions"""
    try:
        folder_path = "assets/woman"
        image_count = 4

        # Get the total count of images in the dataset
        total_images = sum(len([f for f in files if f.lower().endswith((".png", ".jpg", ".jpeg", ".gif"))])
                           for _, _, files in os.walk(folder_path))

        notification = await message.reply_text("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–ª—å—Ç—É—à–µ–∫...", quote=True)

        # Retrieve random images, exit early if none found
        image_paths = get_random_images(folder_path, image_count)
        if not image_paths:
            await message.reply_text(NO_IMAGES_FOUND, quote=True)
            return

        # Check if the message is from a private chat
        is_private = message.chat.type == ChatType.PRIVATE

        if not is_private:
            # Generate the main caption for the media
            combined_caption = f"–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ: {total_images}\n\n"

            # Try to get chat members for funny captions
            all_members = await get_chat_members(client, message.chat.id)

            for i, image_path in enumerate(image_paths, 1):
                group_info = get_image_owner_mapping(image_path)
                # Add funny caption only if we have members
                if all_members:
                    random_member = random.choice(all_members)
                    random_term = random.choice(RELATIONSHIP_TERMS)
                    verb_suffix = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" if any(
                        verb in random_term for verb in ACCUSATIVE_VERBS) else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                    user_name = random_member.user.first_name or random_member.user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    combined_caption += f"–ü–∏–∫—á–∞ ‚Ññ{i} - {random_term} {verb_suffix} {user_name} | –ò—Å—Ç–æ—á–Ω–∏–∫: {group_info}\n"
                else:
                    combined_caption += f"–ü–∏–∫—á–∞ ‚Ññ{i} | –ò—Å—Ç–æ—á–Ω–∏–∫: {group_info}\n"

        else:
            # Simpler caption for private chats
            combined_caption = f"–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ: {total_images}\n\n"
            for i, image_path in enumerate(image_paths, 1):
                group_info = get_image_owner_mapping(image_path)
                combined_caption += f"–ü–∏–∫—á–∞ ‚Ññ{i} | –ò—Å—Ç–æ—á–Ω–∏–∫: {group_info}\n"

        # Create a media group; only the first image gets the caption
        media_group = [InputMediaPhoto(media=image_paths[0], caption=combined_caption)]
        media_group.extend(InputMediaPhoto(media=image_path) for image_path in image_paths[1:])

        # Send the media group with the caption only on the first image
        await message.reply_media_group(media=media_group, quote=True)
        await notification.delete()
        return

    except Exception as e:
        await message.reply_text(GENERAL_ERROR, quote=True)
        return
