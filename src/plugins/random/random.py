import random
from typing import List

from pyrogram import Client, filters
from pyrogram.types import Message
from structlog import get_logger

from src.plugins.help import command_handler

# Setup logger
log = get_logger(__name__)

# Magic 8-ball responses in Russian
MAGIC_8BALL_RESPONSES = [
    "–ë–µ—Å—Å–ø–æ—Ä–Ω–æ",
    "–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ",
    "–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π",
    "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞",
    "–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º",
    "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è ‚Äî ¬´–¥–∞¬ª",
    "–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ",
    "–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã",
    "–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª",
    "–î–∞",
    "–ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞",
    "–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ",
    "–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å",
    "–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å",
    "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å",
    "–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π",
    "–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª",
    "–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª",
    "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ",
    "–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ",
]


@command_handler(commands=["choice"], description="–í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞", arguments="[–≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ ;]", group="–†–∞–Ω–¥–æ–º")
@Client.on_message(filters.command("choice"), group=2)
async def choice_command(client: Client, message: Message):
    """
    Choose a random option from a list separated by semicolons
    """
    try:
        # Get the text after the command
        command_parts = message.text.split(maxsplit=1)

        if len(command_parts) < 2:
            await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (;)", quote=True)
            return

        options_text = command_parts[1]
        options = [option.strip() for option in options_text.split(";") if option.strip()]

        if not options:
            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã. –£–∫–∞–∂–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (;)", quote=True)
            return

        chosen_option = random.choice(options)
        await message.reply_text(f"üé≤ {chosen_option}", quote=True)

    except Exception as e:
        log.error(f"Error in choice command: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞.", quote=True)


@command_handler(commands=["roll"], description="–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫", group="–†–∞–Ω–¥–æ–º")
@Client.on_message(filters.command("roll"), group=2)
async def roll_command(client: Client, message: Message):
    """
    Roll a dice (1-6)
    """
    try:
        result = random.randint(1, 6)
        await message.reply_text(f"üé≤ {result}", quote=True)
    except Exception as e:
        log.error(f"Error in roll command: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞.", quote=True)


@command_handler(commands=["flip"], description="–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É", group="–†–∞–Ω–¥–æ–º")
@Client.on_message(filters.command("flip"), group=2)
async def flip_command(client: Client, message: Message):
    """
    Flip a coin
    """
    try:
        result = random.choice(["–û—Ä—ë–ª", "–†–µ—à–∫–∞"])
        await message.reply_text(f"ü™ô {result}", quote=True)
    except Exception as e:
        log.error(f"Error in flip command: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–∏ –º–æ–Ω–µ—Ç–∫–∏.", quote=True)


@command_handler(commands=["8ball"], description="–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π", group="–†–∞–Ω–¥–æ–º")
@Client.on_message(filters.command("8ball"), group=2)
async def magic_8ball_command(client: Client, message: Message):
    """
    Magic 8-ball predictions
    """
    try:
        response = random.choice(MAGIC_8BALL_RESPONSES)
        await message.reply_text(f"üîÆ {response}", quote=True)
    except Exception as e:
        log.error(f"Error in 8ball command: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–∞–≥–∏—á–µ—Å–∫–æ–º—É —à–∞—Ä—É.", quote=True)


@command_handler(commands=["random"], description="–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ", arguments="[–º–∏–Ω] [–º–∞–∫—Å]", group="–†–∞–Ω–¥–æ–º")
@Client.on_message(filters.command("random"), group=2)
async def random_command(client: Client, message: Message):
    """
    Generate a random number in a range
    """
    try:
        command_parts = message.text.split()

        # Default range
        min_value = 1
        max_value = 100

        # Parse arguments
        if len(command_parts) >= 3:
            try:
                min_value = int(command_parts[1])
                max_value = int(command_parts[2])
            except ValueError:
                await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞.", quote=True)
                return
        elif len(command_parts) == 2:
            try:
                max_value = int(command_parts[1])
            except ValueError:
                await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º—É–º–∞.", quote=True)
                return

        # Ensure min is less than max
        if min_value > max_value:
            min_value, max_value = max_value, min_value

        result = random.randint(min_value, max_value)
        await message.reply_text(f"üé≤ ({min_value}-{max_value}): {result}", quote=True)

    except Exception as e:
        log.error(f"Error in random command: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞.", quote=True)
