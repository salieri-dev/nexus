from pyrogram import Client, filters
from pyrogram.types import Message
from structlog import get_logger

from src.plugins.help import command_handler
from src.plugins.magik.service import ImageService
from src.security.rate_limiter import rate_limit
from src.utils.helpers import get_photo

# Setup logger
log = get_logger(__name__)
image_service = ImageService()

# Initialize message service
MAGIK_NO_IMAGE = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ GIF, –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ GIF."
MAGIK_GENERATION_FAILED = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
MAGIK_NO_REPLY_IMAGE = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."
GENERAL_ERROR = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
RATELIMIT_TIME = 10


# General helper for commands operating on image + GIF
async def handle_image_command(message: Message, process_func):
    try:
        photo, is_gif = await get_photo(message)
        if not photo:
            await message.reply_text(text=MAGIK_NO_IMAGE, quote=True)
            return

        processed_image = process_func(photo, is_gif)
        if is_gif:
            await message.reply_animation(animation=processed_image, quote=True)
        else:
            await message.reply_photo(photo=processed_image, quote=True)

    except Exception as e:
        log.error(f"Error in image command: {e}", exc_info=True)
        await message.reply_text(text=GENERAL_ERROR, quote=True)


# General helper for commands with variable parameters (like rotate, watermark, jpeg)
async def handle_param_command(message: Message, process_func, default_value=90):
    try:
        photo, is_gif = await get_photo(message)
        if not photo:
            await message.reply_text(text=MAGIK_NO_REPLY_IMAGE, quote=True)
            return

        try:
            param = int(message.text.split()[1])
        except (IndexError, ValueError):
            param = default_value

        processed_image = process_func(photo, param)
        await message.reply_photo(photo=processed_image, quote=True)

    except Exception as e:
        log.error(f"Error in param command: {e}")
        await message.reply_text(text=GENERAL_ERROR, quote=True)


# ---- COMMANDS ----
@command_handler(commands=["magik"], description="–ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∏—Å–∫–∞–∂–µ–Ω–∏—è –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é", group="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
@Client.on_message(filters.command("magik"), group=2)
@rate_limit(operation="magik_handler", window_seconds=RATELIMIT_TIME, on_rate_limited=lambda message: message.reply(f"üïí –ü–æ–¥–æ–∂–¥–∏—Ç–µ {RATELIMIT_TIME} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º!"))
async def magik_command(client: Client, message: Message):
    await handle_image_command(message, lambda photo, is_gif: image_service.do_magik(2, photo, is_gif))


@command_handler(commands=["pixel"], description="–ü–∏–∫—Å–µ–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", group="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
@Client.on_message(filters.command("pixel"), group=2)
@rate_limit(operation="magik_handler", window_seconds=RATELIMIT_TIME, on_rate_limited=lambda message: message.reply(f"üïí –ü–æ–¥–æ–∂–¥–∏—Ç–µ {RATELIMIT_TIME} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º!"))
async def pixel_command(client: Client, message: Message):
    await handle_image_command(message, lambda photo, is_gif: image_service.make_pixel_gif(photo, 9) if is_gif else image_service.make_pixel(photo, 9))


@command_handler(commands=["waaw"], description="–ó–µ—Ä–∫–∞–ª—å–Ω–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞", group="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
@Client.on_message(filters.command("waaw"), group=2)
@rate_limit(operation="magik_handler", window_seconds=RATELIMIT_TIME, on_rate_limited=lambda message: message.reply(f"üïí –ü–æ–¥–æ–∂–¥–∏—Ç–µ {RATELIMIT_TIME} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º!"))
async def waaw_command(client: Client, message: Message):
    return await handle_image_command(message, lambda photo, is_gif: image_service.do_waaw(photo))


@command_handler(commands=["haah"], description="–ó–µ—Ä–∫–∞–ª—å–Ω–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞", group="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
@Client.on_message(filters.command("haah"), group=2)
@rate_limit(operation="magik_handler", window_seconds=RATELIMIT_TIME, on_rate_limited=lambda message: message.reply(f"üïí –ü–æ–¥–æ–∂–¥–∏—Ç–µ {RATELIMIT_TIME} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º!"))
async def haah_command(client: Client, message: Message):
    return await handle_image_command(message, lambda photo, is_gif: image_service.do_haah(photo))


@command_handler(commands=["woow"], description="–ó–µ—Ä–∫–∞–ª—å–Ω–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –≤–µ—Ä—Ö–Ω—é—é –ø–æ–ª–æ–≤–∏–Ω—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–Ω–∏–∑", group="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
@Client.on_message(filters.command("woow"), group=2)
@rate_limit(operation="magik_handler", window_seconds=RATELIMIT_TIME, on_rate_limited=lambda message: message.reply(f"üïí –ü–æ–¥–æ–∂–¥–∏—Ç–µ {RATELIMIT_TIME} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º!"))
async def woow_command(client: Client, message: Message):
    return await handle_image_command(message, lambda photo, is_gif: image_service.do_woow(photo))


@command_handler(commands=["hooh"], description="–ó–µ—Ä–∫–∞–ª—å–Ω–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –ª–µ–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–ø—Ä–∞–≤–æ", group="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
@Client.on_message(filters.command("hooh"), group=2)
@rate_limit(operation="magik_handler", window_seconds=RATELIMIT_TIME, on_rate_limited=lambda message: message.reply(f"üïí –ü–æ–¥–æ–∂–¥–∏—Ç–µ {RATELIMIT_TIME} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º!"))
async def hooh_command(client: Client, message: Message):
    return await handle_image_command(message, lambda photo, is_gif: image_service.do_hooh(photo))


@command_handler(commands=["flipimg"], description="–ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ", group="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
@Client.on_message(filters.command("flipimg"), group=2)
@rate_limit(operation="magik_handler", window_seconds=RATELIMIT_TIME, on_rate_limited=lambda message: message.reply(f"üïí –ü–æ–¥–æ–∂–¥–∏—Ç–µ {RATELIMIT_TIME} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º!"))
async def flipimg_command(client: Client, message: Message):
    return await handle_image_command(message, lambda photo, is_gif: image_service.flip_image(photo))


@command_handler(commands=["flop"], description="–ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ", group="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
@Client.on_message(filters.command("flop"), group=2)
@rate_limit(operation="magik_handler", window_seconds=RATELIMIT_TIME, on_rate_limited=lambda message: message.reply(f"üïí –ü–æ–¥–æ–∂–¥–∏—Ç–µ {RATELIMIT_TIME} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º!"))
async def flop_command(client: Client, message: Message):
    return await handle_image_command(message, lambda photo, is_gif: image_service.flop_image(photo))


@command_handler(commands=["invert"], description="–ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", group="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
@Client.on_message(filters.command("invert"), group=2)
@rate_limit(operation="magik_handler", window_seconds=RATELIMIT_TIME, on_rate_limited=lambda message: message.reply(f"üïí –ü–æ–¥–æ–∂–¥–∏—Ç–µ {RATELIMIT_TIME} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º!"))
async def invert_command(client: Client, message: Message):
    return await handle_image_command(message, lambda photo, is_gif: image_service.invert_image(photo))


@command_handler(commands=["rotate"], description="–ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —É–≥–æ–ª", arguments="[—É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞; –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 90]", group="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
@Client.on_message(filters.command("rotate"), group=2)
@rate_limit(operation="magik_handler", window_seconds=RATELIMIT_TIME, on_rate_limited=lambda message: message.reply(f"üïí –ü–æ–¥–æ–∂–¥–∏—Ç–µ {RATELIMIT_TIME} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º!"))
async def rotate_command(client: Client, message: Message):
    return await handle_param_command(message, image_service.rotate_image, default_value=90)
