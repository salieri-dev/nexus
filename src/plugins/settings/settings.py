from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.enums import ChatType
from structlog import get_logger

from src.database.message_repository import PeerRepository
from src.database.client import DatabaseClient

log = get_logger(__name__)

async def get_chat_setting(chat_id: int, setting_key: str, default: bool = False) -> bool:
    """Get a specific setting value for a chat.
    
    Args:
        chat_id: The chat ID to get settings for
        setting_key: The setting key to get (e.g. 'nsfw', 'transcribe', etc.)
        default: Default value if setting is not found
        
    Returns:
        bool: The setting value
    """
    try:
        # Initialize repository
        db_client = DatabaseClient.get_instance()
        peer_repo = PeerRepository(db_client.client)
        
        # Get current settings
        config = await peer_repo.get_peer_config(chat_id)
        
        # Map user-friendly names to config keys
        setting_map = {
            'nsfw': 'nsfw_enabled',
            'transcribe': 'transcribe_enabled',
            'summary': 'summary_enabled',
            'nhentai_blur': 'nhentai_blur'
        }
        
        # Get the actual config key
        config_key = setting_map.get(setting_key, setting_key)
        
        return config.get(config_key, default)
        
    except Exception as e:
        log.error("Error getting chat setting",
                 error=str(e),
                 chat_id=chat_id,
                 setting=setting_key)
        return default

def format_settings(config: dict) -> str:
    """Format settings for display in Russian."""
    # Remove chat_id and _id from display
    display_config = {k: v for k, v in config.items() if k not in ['chat_id', '_id']}
    
    # Format each setting
    settings_text = ["üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"]
    
    # Translation mapping with emojis
    translations = {
        'nsfw_enabled': ('üîû NSFW', '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è NSFW –∫–æ–Ω—Ç–µ–Ω—Ç–∞'),
        'transcribe_enabled': ('üéô –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è', '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç'),
        'summary_enabled': ('üìù –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è', '–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–∏—Ö –æ–±–∑–æ—Ä–æ–≤ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤'),
        'nhentai_blur': ('üå´ NHentai blur', '–†–∞–∑–º—ã—Ç–∏–µ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    }
    
    for key, value in display_config.items():
        # Get translated name and description
        setting_name, _ = translations.get(key, (key, ''))
        # Convert boolean to enabled/disabled in Russian with emojis
        status = "‚úÖ –≤–∫–ª—é—á–µ–Ω–æ" if value else "‚ùå –≤—ã–∫–ª—é—á–µ–Ω–æ"
        settings_text.append(f"{setting_name}: {status}")
    
    return "\n".join(settings_text)

def get_help_text() -> str:
    """Get detailed help text about settings."""
    return (
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º:\n\n"
        "üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /settings - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "‚Ä¢ /settings enable <–Ω–∞—Å—Ç—Ä–æ–π–∫–∞> - –í–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É\n"
        "‚Ä¢ /settings disable <–Ω–∞—Å—Ç—Ä–æ–π–∫–∞> - –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É\n\n"
        "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–∞—Ö):\n\n"
        "1Ô∏è‚É£ nsfw\n"
        "   üî∏ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è NSFW –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "   üî∏ –ü—Ä–∏–º–µ—Ä: `/settings enable nsfw`\n\n"
        "2Ô∏è‚É£ transcribe\n"
        "   üî∏ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç\n"
        "   üî∏ –ü—Ä–∏–º–µ—Ä: `/settings disable transcribe`\n\n"
        "3Ô∏è‚É£ summary\n"
        "   üî∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ —á–∞—Ç–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
        "   üî∏ –ü—Ä–∏–º–µ—Ä: `/settings enable summary`\n\n"
        "4Ô∏è‚É£ nhentai_blur\n"
        "   üî∏ –†–∞–∑–º—ã—Ç–∏–µ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ /nhentai\n"
        "   üî∏ –ü—Ä–∏–º–µ—Ä: `/settings disable nhentai_blur`"
    )

@Client.on_message(filters.command(["settings", "config"]), group=1)
async def settings_handler(client: Client, message: Message):
    """Handle /settings command."""
    try:
        # Check if private chat
        if message.chat.type == ChatType.PRIVATE:
            await message.reply_text("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –í –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö NSFW –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω—ã.")
            return

        # Initialize repository
        db_client = DatabaseClient.get_instance()
        peer_repo = PeerRepository(db_client.client)
        
        # Get current settings
        config = await peer_repo.get_peer_config(message.chat.id)
        
        # If no additional arguments, display current settings and help
        if len(message.command) == 1:
            settings_text = format_settings(config)
            help_text = get_help_text()
            await message.reply_text(f"{settings_text}\n\n{help_text}")
            return

        # Handle enable/disable commands
        if len(message.command) < 3:
            await message.reply_text(get_help_text())
            return

        action = message.command[1].lower()
        setting = message.command[2].lower()

        # Map user-friendly names to config keys
        setting_map = {
            'nsfw': 'nsfw_enabled',
            'transcribe': 'transcribe_enabled',
            'summary': 'summary_enabled',
            'nhentai_blur': 'nhentai_blur'
        }

        if action not in ['enable', 'disable']:
            await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'enable' –∏–ª–∏ 'disable'.")
            return

        if setting not in setting_map:
            await message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."
            )
            return

        # Update the setting
        setting_key = setting_map[setting]
        new_value = action == 'enable'
        
        # Update config
        updated_config = await peer_repo.update_peer_config(
            message.chat.id,
            {setting_key: new_value}
        )

        # Show updated settings
        settings_text = format_settings(updated_config)
        await message.reply_text(
            f"‚ú® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n{settings_text}"
        )

        log.info(
            f"Updated settings for chat",
            chat_id=message.chat.id,
            setting=setting_key,
            value=new_value
        )

    except Exception as e:
        log.error("Error handling settings command", error=str(e))
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")